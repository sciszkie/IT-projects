package org.example;

import java.math.BigInteger;

import java.math.BigInteger;

public class JH {
    /**
     * launching a program
     *
     */
    public static void main(String[] args) {
        String text = "";
        String[] bl = blocks(text);
        int number = 256;
        String h = f_F(hH_1(number), bl, bl.length);
        String hash = cut_cut_cut(h, number);
        System.out.println(hash);

    }

    /**
     * changes the message to the binary String
     * padding the message
     * parsing the padded message
     * @return String[]
     */
    public static String[] blocks(String text){
        byte[] btext = text.getBytes(); //chaniging text to bytes
        String inBinaryText = "";
        String result = "";
        for (byte b : btext){
            result = Integer.toBinaryString(b);
            while (result.length() % 8 != 0){
                result = "0" + result;
            }
            inBinaryText += result; //creating binary String of our message
        }

        int l = inBinaryText.length();
        inBinaryText += "1";
        //adding padding
        //counting how many "0" is needed to add
        int amount_0 = 384 - 1 + (-l)%512;
        if(amount_0<383){
            amount_0=amount_0+512;
        }

        StringBuilder sb = new StringBuilder();

        sb.append(inBinaryText);
        String zeros = "0".repeat(amount_0);
        sb.append(zeros);
        String l_in_binary = Integer.toBinaryString(l);
        while(l_in_binary.length()%8!=0)
        {
            l_in_binary="0"+l_in_binary;
        }
        zeros = "0".repeat(128-l_in_binary.length());

        sb.append(zeros);
        sb.append(l_in_binary);
        sb.capacity();
        String[] savedInBlocks = new String[ 1+sb.length()/512];
        savedInBlocks[0] = "0".repeat(512);
        for (int i = 1; i <1+ sb.length()/512; i++) {
            savedInBlocks[i] = sb.substring((i - 1)*512, (i)*512);
        }
        return savedInBlocks;
    }

    /**
     *
     * @param number
     * @return h-1
     */
    public static String hH_1(int number){
        String h_1 = "";
        switch (number){
            case 224:
                h_1 = h_1 + "0000000011100000" + "0".repeat(1008);
                break;
            case 256:
                h_1 = h_1 + "0000000100000000" + "0".repeat(1008);
                break;
            case 384:
                h_1 = h_1 + "0000000110000000" + "0".repeat(1008);
                break;
            case 512:
                h_1 = h_1 + "0000001000000000" + "0".repeat(1008);
                break;
            default:
                System.exit(0);
        }
        return h_1;
    }

    public static String f_F(String h_1, String[] savedInBlocks, int n){
        String h = h_1;
        String a = "";
        String b = "";
        for (int i = 0; i <n; i++) {

            //XORing; first stage of f_F
            for (int j = 0; j < 512; j++) {
                if (savedInBlocks[i].charAt(j) == h.charAt(j)) {
                    a = a + "0";
                }
                else {
                    a = a + "1";
                }
            }
            a = a + h.substring(512);

            b = e_E(a);
            h = "";
            for (int k = 0; k < 512; k++) {
                h += b.charAt(k);
            }
            for (int j = 512; j < 1024; j++) {
                if (b.charAt(j) == savedInBlocks[i].charAt(j-512)) {
                    h = h + "0";
                }
                else {
                    h = h + "1";
                }

            }
            a = "";
            b = "";
        }
        return h;
    }


    public static String e_E(String a){
        int[][] roundConstant = {



                {0x6a, 0x09, 0xe6, 0x67, 0xf3, 0xbc, 0xc9, 0x08, 0xb2, 0xfb, 0x13, 0x66, 0xea, 0x95, 0x7d, 0x3e, 0x3a, 0xde, 0xc1, 0x75, 0x12, 0x77, 0x50, 0x99, 0xda, 0x2f, 0x59, 0x0b, 0x06, 0x67, 0x32, 0x2a },
                {0xbb, 0x89, 0x6b, 0xf0, 0x59, 0x55, 0xab, 0xcd, 0x52, 0x81, 0x82, 0x8d, 0x66, 0xe7, 0xd9, 0x9a, 0xc4, 0x20, 0x34, 0x94, 0xf8, 0x9b, 0xf1, 0x28, 0x17, 0xde, 0xb4, 0x32, 0x88, 0x71, 0x22, 0x31 },
                {0x18, 0x36, 0xe7, 0x6b, 0x12, 0xd7, 0x9c, 0x55, 0x11, 0x8a, 0x11, 0x39, 0xd2, 0x41, 0x7d, 0xf5, 0x2a, 0x20, 0x21, 0x22, 0x5f, 0xf6, 0x35, 0x00, 0x63, 0xd8, 0x8e, 0x5f, 0x1f, 0x91, 0x63, 0x1c },
                {0x26, 0x30, 0x85, 0xa7, 0x00, 0x0f, 0xa9, 0xc3, 0x31, 0x7c, 0x6c, 0xa8, 0xab, 0x65, 0xf7, 0xa7, 0x71, 0x3c, 0xf4, 0x20, 0x10, 0x60, 0xce, 0x88, 0x6a, 0xf8, 0x55, 0xa9, 0x0d, 0x6a, 0x4e, 0xed},
                {0x1c, 0xeb, 0xaf, 0xd5, 0x1a, 0x15, 0x6a, 0xeb, 0x62, 0xa1, 0x1f, 0xb3, 0xbe, 0x2e, 0x14, 0xf6, 0x0b, 0x7e, 0x48, 0xde, 0x85, 0x81, 0x42, 0x70, 0xfd, 0x62, 0xe9, 0x76, 0x14, 0xd7, 0xb4, 0x41 },
                {0xe5, 0x56, 0x4c, 0xb5, 0x74, 0xf7, 0xe0, 0x9c, 0x75, 0xe2, 0xe2, 0x44, 0x92, 0x9e, 0x95, 0x49, 0x27, 0x9a, 0xb2, 0x24, 0xa2, 0x8e, 0x44, 0x5d, 0x57, 0x18, 0x5e, 0x7d, 0x7a, 0x09, 0xfd, 0xc1 },
                {0x58, 0x20, 0xf0, 0xf0, 0xd7, 0x64, 0xcf, 0xf3, 0xa5, 0x55, 0x2a, 0x5e, 0x41, 0xa8, 0x2b, 0x9e, 0xff, 0x6e, 0xe0, 0xaa, 0x61, 0x57, 0x73, 0xbb, 0x07, 0xe8, 0x60, 0x34, 0x24, 0xc3, 0xcf, 0x8a },
                {0xb1, 0x26, 0xfb, 0x74, 0x17, 0x33, 0xc5, 0xbf, 0xce, 0xf6, 0xf4, 0x3a, 0x62, 0xe8, 0xe5, 0x70, 0x6a, 0x26, 0x65, 0x60, 0x28, 0xaa, 0x89, 0x7e, 0xc1, 0xea, 0x46, 0x16, 0xce, 0x8f, 0xd5, 0x10 },
                {0xdb, 0xf0, 0xde, 0x32, 0xbc, 0xa7, 0x72, 0x54, 0xbb, 0x4f, 0x56, 0x25, 0x81, 0xa3, 0xbc, 0x99, 0x1c, 0xf9, 0x4f, 0x22, 0x56, 0x52, 0xc2, 0x7f, 0x14, 0xea, 0xe9, 0x58, 0xae, 0x6a, 0xa6, 0x16 },
                {0xe6, 0x11, 0x3b, 0xe6, 0x17, 0xf4, 0x5f, 0x3d, 0xe5, 0x3c, 0xff, 0x03, 0x91, 0x9a, 0x94, 0xc3, 0x2c, 0x92, 0x7b, 0x09, 0x3a, 0xc8, 0xf2, 0x3b, 0x47, 0xf7, 0x18, 0x9a, 0xad, 0xb9, 0xbc, 0x67 },
                {0x80, 0xd0, 0xd2, 0x60, 0x52, 0xca, 0x45, 0xd5, 0x93, 0xab, 0x5f, 0xb3, 0x10, 0x25, 0x06, 0x39, 0x00, 0x83, 0xaf, 0xb5, 0xff, 0xe1, 0x07, 0xda, 0xcf, 0xcb, 0xa7, 0xdb, 0xe6, 0x01, 0xa1, 0x2b },
                {0x43, 0xaf, 0x1c, 0x76, 0x12, 0x67, 0x14, 0xdf, 0xa9, 0x50, 0xc3, 0x68, 0x78, 0x7c, 0x81, 0xae, 0x3b, 0xee, 0xcf, 0x95, 0x6c, 0x85, 0xc9, 0x62, 0x08, 0x6a, 0xe1, 0x6e, 0x40, 0xeb, 0xb0, 0xb4 },
                {0x9a, 0xee, 0x89, 0x94, 0xd2, 0xd7, 0x4a, 0x5c, 0xdb, 0x7b, 0x1e, 0xf2, 0x94, 0xee, 0xd5, 0xc1, 0x52, 0x07, 0x24, 0xdd, 0x8e, 0xd5, 0x8c, 0x92, 0xd3, 0xf0, 0xe1, 0x74, 0xb0, 0xc3, 0x20, 0x45 },
                {0x0b, 0x2a, 0xa5, 0x8c, 0xeb, 0x3b, 0xdb, 0x9e, 0x1e, 0xef, 0x66, 0xb3, 0x76, 0xe0, 0xc5, 0x65, 0xd5, 0xd8, 0xfe, 0x7b, 0xac, 0xb8, 0xda, 0x86, 0x6f, 0x85, 0x9a, 0xc5, 0x21, 0xf3, 0xd5, 0x71},
                {0x7a, 0x15, 0x23, 0xef, 0x3d, 0x97, 0x0a, 0x3a, 0x9b, 0x0b, 0x4d, 0x61, 0x0e, 0x02, 0x74, 0x9d, 0x37, 0xb8, 0xd5, 0x7c, 0x18, 0x85, 0xfe, 0x42, 0x06, 0xa7, 0xf3, 0x38, 0xe8, 0x35, 0x68, 0x66 },
                {0x2c, 0x2d, 0xb8, 0xf7, 0x87, 0x66, 0x85, 0xf2, 0xcd, 0x9a, 0x2e, 0x0d, 0xdb, 0x64, 0xc9, 0xd5, 0xbf, 0x13, 0x90, 0x53, 0x71, 0xfc, 0x39, 0xe0, 0xfa, 0x86, 0xe1, 0x47, 0x72, 0x34, 0xa2, 0x97 },
                {0x9d, 0xf0, 0x85, 0xeb, 0x25, 0x44, 0xeb, 0xf6, 0x2b, 0x50, 0x68, 0x6a, 0x71, 0xe6, 0xe8, 0x28, 0xdf, 0xed, 0x9d, 0xbe, 0x0b, 0x10, 0x6c, 0x94, 0x52, 0xce, 0xdd, 0xff, 0x3d, 0x13, 0x89, 0x90 },
                {0xe6, 0xe5, 0xc4, 0x2c, 0xb2, 0xd4, 0x60, 0xc9, 0xd6, 0xe4, 0x79, 0x1a, 0x16, 0x81, 0xbb, 0x2e, 0x22, 0x2e, 0x54, 0x55, 0x8e, 0xb7, 0x8d, 0x52, 0x44, 0xe2, 0x17, 0xd1, 0xbf, 0xcf, 0x50, 0x58 },
                {0x8f, 0x1f, 0x57, 0xe4, 0x4e, 0x12, 0x62, 0x10, 0xf0, 0x07, 0x63, 0xff, 0x57, 0xda, 0x20, 0x8a, 0x50, 0x93, 0xb8, 0xff, 0x79, 0x47, 0x53, 0x4a, 0x4c, 0x26, 0x0a, 0x17, 0x64, 0x2f, 0x72, 0xb2 },
                {0xae, 0x4e, 0xf4, 0x79, 0x2e, 0xa1, 0x48, 0x60, 0x8c, 0xf1, 0x16, 0xcb, 0x2b, 0xff, 0x66, 0xe8, 0xfc, 0x74, 0x81, 0x12, 0x66, 0xcd, 0x64, 0x11, 0x12, 0xcd, 0x17, 0x80, 0x1e, 0xd3, 0x8b, 0x59 },
                {0x91, 0xa7, 0x44, 0xef, 0xbf, 0x68, 0xb1, 0x92, 0xd0, 0x54, 0x9b, 0x60, 0x8b, 0xdb, 0x31, 0x91, 0xfc, 0x12, 0xa0, 0xe8, 0x35, 0x43, 0xce, 0xc5, 0xf8, 0x82, 0x25, 0x0b, 0x24, 0x4f, 0x78, 0xe4 },
                {0x4b, 0x5d, 0x27, 0xd3, 0x36, 0x8f, 0x9c, 0x17, 0xd4, 0xb2, 0xa2, 0xb2, 0x16, 0xc7, 0xe7, 0x4e, 0x77, 0x14, 0xd2, 0xcc, 0x03, 0xe1, 0xe4, 0x45, 0x88, 0xcd, 0x99, 0x36, 0xde, 0x74, 0x35, 0x7c },
                {0x0e, 0xa1, 0x7c, 0xaf, 0xb8, 0x28, 0x61, 0x31, 0xbd, 0xa9, 0xe3, 0x75, 0x7b, 0x36, 0x10, 0xaa, 0x3f, 0x77, 0xa6, 0xd0, 0x57, 0x50, 0x53, 0xfc, 0x92, 0x6e, 0xea, 0x7e, 0x23, 0x7d, 0xf2, 0x89 },
                {0x84, 0x8a, 0xf9, 0xf5, 0x7e, 0xb1, 0xa6, 0x16, 0xe2, 0xc3, 0x42, 0xc8, 0xce, 0xa5, 0x28, 0xb8, 0xa9, 0x5a, 0x5d, 0x16, 0xd9, 0xd8, 0x7b, 0xe9, 0xbb, 0x37, 0x84, 0xd0, 0xc3, 0x51, 0xc3, 0x2b },
                {0xc0, 0x43, 0x5c, 0xc3, 0x65, 0x4f, 0xb8, 0x5d, 0xd9, 0x33, 0x5b, 0xa9, 0x1a, 0xc3, 0xdb, 0xde, 0x1f, 0x85, 0xd5, 0x67, 0xd7, 0xad, 0x16, 0xf9, 0xde, 0x6e, 0x00, 0x9b, 0xca, 0x3f, 0x95, 0xb5 },
                {0x92, 0x75, 0x47, 0xfe, 0x5e, 0x5e, 0x45, 0xe2, 0xfe, 0x99, 0xf1, 0x65, 0x1e, 0xa1, 0xcb, 0xf0, 0x97, 0xdc, 0x3a, 0x3d, 0x40, 0xdd, 0xd2, 0x1c, 0xee, 0x26, 0x05, 0x43, 0xc2, 0x88, 0xec, 0x6b },
                {0xc1, 0x17, 0xa3, 0x77, 0x0d, 0x3a, 0x34, 0x46, 0x9d, 0x50, 0xdf, 0xa7, 0xdb, 0x02, 0x03, 0x00, 0xd3, 0x06, 0xa3, 0x65, 0x37, 0x4f, 0xa8, 0x28, 0xc8, 0xb7, 0x80, 0xee, 0x1b, 0x9d, 0x7a, 0x34 },
                {0x8f, 0xf2, 0x17, 0x8a, 0xe2, 0xdb, 0xe5, 0xe8, 0x72, 0xfa, 0xc7, 0x89, 0xa3, 0x4b, 0xc2, 0x28, 0xde, 0xbf, 0x54, 0xa8, 0x82, 0x74, 0x3c, 0xaa, 0xd1, 0x4f, 0x3a, 0x55, 0x0f, 0xdb, 0xe6, 0x8f },
                {0xab, 0xd0, 0x6c, 0x52, 0xed, 0x58, 0xff, 0x09, 0x12, 0x05, 0xd0, 0xf6, 0x27, 0x57, 0x4c, 0x8c, 0xbc, 0x1f, 0xe7, 0xcf, 0x79, 0x21, 0x0f, 0x5a, 0x22, 0x86, 0xf6, 0xe2, 0x3a, 0x27, 0xef, 0xa0 },
                {0x63, 0x1f, 0x4a, 0xcb, 0x8d, 0x3c, 0xa4, 0x25, 0x3e, 0x30, 0x18, 0x49, 0xf1, 0x57, 0x57, 0x1d, 0x32, 0x11, 0xb6, 0xc1, 0x04, 0x53, 0x47, 0xbe, 0xfb, 0x7c, 0x77, 0xdf, 0x3c, 0x6c, 0xa7, 0xbd },
                {0xae, 0x88, 0xf2, 0x34, 0x2c, 0x23, 0x34, 0x45, 0x90, 0xbe, 0x20, 0x14, 0xfa, 0xb4, 0xf1, 0x79, 0xfd, 0x4b, 0xf7, 0xc9, 0x0d, 0xb1, 0x4f, 0xa4, 0x01, 0x8f, 0xcc, 0xe6, 0x89, 0xd2, 0x12, 0x7b },
                {0x93, 0xb8, 0x93, 0x85, 0x54, 0x6d, 0x71, 0x37, 0x9f, 0xe4, 0x1c, 0x39, 0xbc, 0x60, 0x2e, 0x8b, 0x7c, 0x8b, 0x2f, 0x78, 0xee, 0x91, 0x4d, 0x1f, 0x0a, 0xf0, 0xd4, 0x37, 0xa1, 0x89, 0xa8, 0xa4 },
                {0x1d, 0x1e, 0x03, 0x6a, 0xbe, 0xef, 0x3f, 0x44, 0x84, 0x8c, 0xd7, 0x6e, 0xf6, 0xba, 0xa8, 0x89, 0xfc, 0xec, 0x56, 0xcd, 0x79, 0x67, 0xeb, 0x90, 0x9a, 0x46, 0x4b, 0xfc, 0x23, 0xc7, 0x24, 0x35 },
                {0xa8, 0xe4, 0xed, 0xe4, 0xc5, 0xfe, 0x5e, 0x88, 0xd4, 0xfb, 0x19, 0x2e, 0x0a, 0x08, 0x21, 0xe9, 0x35, 0xba, 0x14, 0x5b, 0xbf, 0xc5, 0x9c, 0x25, 0x08, 0x28, 0x27, 0x55, 0xa5, 0xdf, 0x53, 0xa5 },
                {0x8e, 0x4e, 0x37, 0xa3, 0xb9, 0x70, 0xf0, 0x79, 0xae, 0x9d, 0x22, 0xa4, 0x99, 0xa7, 0x14, 0xc8, 0x75, 0x76, 0x02, 0x73, 0xf7, 0x4a, 0x93, 0x98, 0x99, 0x5d, 0x32, 0xc0, 0x50, 0x27, 0xd8, 0x10 },
                {0x61, 0xcf, 0xa4, 0x27, 0x92, 0xf9, 0x3b, 0x9f, 0xde, 0x36, 0xeb, 0x16, 0x3e, 0x97, 0x87, 0x09, 0xfa, 0xfa, 0x76, 0x16, 0xec, 0x3c, 0x7d, 0xad, 0x01, 0x35, 0x80, 0x6c, 0x3d, 0x91, 0xa2, 0x1b },
                {0xf0, 0x37, 0xc5, 0xd9, 0x16, 0x23, 0x28, 0x8b, 0x7d, 0x03, 0x02, 0xc1, 0xb9, 0x41, 0xb7, 0x26, 0x76, 0xa9, 0x43, 0xb3, 0x72, 0x65, 0x9d, 0xcd, 0x7d, 0x6e, 0xf4, 0x08, 0xa1, 0x1b, 0x40, 0xc0 },
                {0x2a, 0x30, 0x63, 0x54, 0xca, 0x3e, 0xa9, 0x0b, 0x0e, 0x97, 0xea, 0xeb, 0xce, 0xa0, 0xa6, 0xd7, 0xc6, 0x52, 0x23, 0x99, 0xe8, 0x85, 0xc6, 0x13, 0xde, 0x82, 0x49, 0x22, 0xc8, 0x92, 0xc4, 0x90 },
                {0x3c, 0xa6, 0xcd, 0xd7, 0x88, 0xa5, 0xbd, 0xc5, 0xef, 0x2d, 0xce, 0xeb, 0x16, 0xbc, 0xa3, 0x1e, 0x0a, 0x0d, 0x2c, 0x7e, 0x99, 0x21, 0xb6, 0xf7, 0x1d, 0x33, 0xe2, 0x5d, 0xd2, 0xf3, 0xcf, 0x53 },
                {0xf7, 0x25, 0x78, 0x72, 0x1d, 0xb5, 0x6b, 0xf8, 0xf4, 0x95, 0x38, 0xb0, 0xae, 0x6e, 0xa4, 0x70, 0xc2, 0xfb, 0x13, 0x39, 0xdd, 0x26, 0x33, 0x3f, 0x13, 0x5f, 0x7d, 0xef, 0x45, 0x37, 0x6e, 0xc0 },
                {0xe4, 0x49, 0xa0, 0x3e, 0xab, 0x35, 0x9e, 0x34, 0x09, 0x5f, 0x8b, 0x4b, 0x55, 0xcd, 0x7a, 0xc7, 0xc0, 0xec, 0x65, 0x10, 0xf2, 0xc4, 0xcc, 0x79, 0xfa, 0x6b, 0x1f, 0xee, 0x6b, 0x18, 0xc5, 0x9e},
                {0x73, 0xbd, 0x69, 0x78, 0xc5, 0x9f, 0x2b, 0x21, 0x94, 0x49, 0xb3, 0x67, 0x70, 0xfb, 0x31, 0x3f, 0xbe, 0x2d, 0xa2, 0x8f, 0x6b, 0x04, 0x27, 0x5f, 0x07, 0x1a, 0x1b, 0x19, 0x3d, 0xde, 0x20, 0x72}};


        String dividedA[] = new String[256];
        dividedA = grouping(a);
        dividedA=R(dividedA,roundConstant);
        char[] q42;
        String b = "";
        q42 = deGrouping(dividedA);
        for (int i = 0; i < q42.length; i++) {
            b += q42[i];
        }
        return b;
    }
    public static String[] R(String [] dividedA,int [][]roundConstant){
        String roundKeyinBinary = "";
        for (int i = 0; i < 42; i++) {
            roundKeyinBinary = countingRoundedkey(roundConstant, i);
            dividedA = sBOXES(dividedA, roundKeyinBinary);
            dividedA = linearTransformation(dividedA);
            dividedA = pi_od_D(dividedA);
            dividedA = p_prim_d(dividedA);
            dividedA = fi_d(dividedA);


        }
        return dividedA;
    }

    /**
     * creating 256 bits rounded key
     * @param roundConstant
     * @param i
     * @return
     */
    public static String countingRoundedkey(int[][] roundConstant, int i){
        String roundedKey = "";
        String t = "";
        for (int j = 0; j < 32; j++) {
            t = "";
            t = Integer.toBinaryString(roundConstant[i][j]);
            while (t.length() % 8 != 0){
                t = "0" + t;
            }
            roundedKey = roundedKey + t;
        }
        return roundedKey;
    }

    /**
     * dividing 1024 bits A into 4 bits packages; 256 packages
     * @param a
     * @return tableOFdividedA
     */
    public static String[] grouping(String a){
        String[] tableOFdividedA = new String[256];
        String[] temp = new String[256];
        String group="";
        for (int i = 0; i < 128; i++)
        {
            group="";
            group += a.charAt(i);
            group += a.charAt(256 + i);
            group += a.charAt(512 + i);
            group += a.charAt(768 + i);
            temp[2*i]=group;
            group="";
            group += a.charAt(i+128);
            group += a.charAt(384 + i);
            group += a.charAt(640 + i);
            group += a.charAt(896 + i);
            temp[2 * i + 1] = group;
        }
        tableOFdividedA = temp;
        return tableOFdividedA;
    }

    public static char[] deGrouping(String[] a){
        String[] tableOfDividedA = a;
        char[] temp = new char[1024];

        for (int i = 0; i < 128; i++)
        {

            temp[i] = tableOfDividedA[2 * i].charAt(0);
            temp[i + 256] = tableOfDividedA[2 * i].charAt(1);
            temp[i + 512] = tableOfDividedA[2 * i].charAt(2);
            temp[i + 768] = tableOfDividedA[2 * i].charAt(3);
            temp[i + 128] = tableOfDividedA[2 * i + 1].charAt(0);
            temp[i + 384] = tableOfDividedA[2 * i + 1].charAt(1);
            temp[i + 640] = tableOfDividedA[2 * i + 1].charAt(2);
            temp[i + 896] = tableOfDividedA[2 * i + 1].charAt(3);
        }
        return temp;
    }

    /**
     *
     * @param tableOFdividedA
     * @param roundKeyinBinary
     * @return tableOFdivideA
     */
    public static String[] sBOXES(String[] tableOFdividedA, String roundKeyinBinary){
        int[] sBOX_0 = {9, 0, 4, 11, 13, 12, 3, 15, 1, 10, 2, 6, 7, 5, 8, 14};
        int[] sBOX_1 = {3, 12, 6, 13, 5, 7, 1, 9, 15, 2, 0, 4, 11, 10, 14, 8};
        for (int i = 0; i < 256; i++) {
            //changing from binary to decimal
            int temp = Integer.parseInt(tableOFdividedA[i], 2);

            if(roundKeyinBinary.charAt(i) == '0'){
                tableOFdividedA[i] = Integer.toBinaryString(sBOX_0[temp]);
                while (tableOFdividedA[i].length() % 4 != 0){
                    tableOFdividedA[i] = "0" + tableOFdividedA[i];
                }
            }else{
                tableOFdividedA[i] = Integer.toBinaryString(sBOX_1[temp]);
                while (tableOFdividedA[i].length() % 4 != 0){
                    tableOFdividedA[i] = "0" + tableOFdividedA[i];
                }
            }
        }
        return tableOFdividedA;
    }

    /**
     *
     * @param tableOFdividedA
     * @return tableOFdividedA
     */
    public static String[] linearTransformation(String[] tableOFdividedA){
        String a = "";
        String b = "";
        String c = "";
        String d = "";
        for (int i = 0; i < 128; i++) {
            c = "";
            d = "";
            a = tableOFdividedA[2*i];
            b = tableOFdividedA[2*i+1];
            //this is B(0) XORed with A(1)
            d += XORing(b.charAt(0), a.charAt(1));
            d += XORing(b.charAt(1), a.charAt(2));
            d += XORing((XORing(b.charAt(2), a.charAt(3)).charAt(0)), a.charAt(0));
            d += XORing(b.charAt(3), a.charAt(0));
            c += XORing(a.charAt(0), d.charAt(1));
            c += XORing(a.charAt(1), d.charAt(2));
            c += XORing((XORing(a.charAt(2), d.charAt(3)).charAt(0)), d.charAt(0));
            c += XORing(a.charAt(3), d.charAt(0));
            tableOFdividedA[2*i] = c;
            tableOFdividedA[2*i+1] = d;
        }

        return tableOFdividedA;
    }

    public static String XORing(char x, char y){
        String a = "";
        if (x == y) {
            a = "0";
        }
        else {
            a = "1";
        }
        return a;
    }

    public static String[] pi_od_D(String[] tableOFdividedA){

        String[] temp = new String[256];
        for (int i = 0; i < 256; i++) {
            if(i%4==0){
                temp[i] = tableOFdividedA[i];
            } else if(i%4==1){
                temp[i] = tableOFdividedA[i];
            } else if(i%4==2){
                temp[i] = tableOFdividedA[i+1];
            } else if (i%4==3) {
                temp[i] = tableOFdividedA[i-1];
            }
        }
        tableOFdividedA = temp;
        return tableOFdividedA;
    }

    public static String[] p_prim_d(String[] tableOFdividedA){

        String[] temp = new String[256];
        for (int i = 0; i < 128; i += 1)
        {
            temp[i] = tableOFdividedA[2 * i];
            temp[i + 128] = tableOFdividedA[2 * i + 1];
        }
        tableOFdividedA = temp;
        return tableOFdividedA;
    }


    public static String[] fi_d(String[] tableOFdividedA){

        String[] temp = new String[256];
        for (int i = 0; i < 128; i++) {
            temp[i] = tableOFdividedA[i];
        }
        for (int i = 128; i < 256; i++) {
            if(i%2==0){
                temp[i] = tableOFdividedA[i+1];
            } else {
                temp[i] = tableOFdividedA[i-1];
            }
        }
        tableOFdividedA = temp;
        return tableOFdividedA;
    }


    public static String cut_cut_cut(String h, int number){
        String bin = h.substring(h.length()-number);
        BigInteger decimal = new BigInteger(bin, 2);
        String hex = decimal.toString(16);
        return hex;
    }
}